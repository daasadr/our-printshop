datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Product {
  id              String    @id @default(cuid())
  name            String
  description     String
  printfulId      String    @unique
  isActive        Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  variants        Variant[]
  categoryId      String?
  category        Category? @relation(fields: [categoryId], references: [id])

  @@index([categoryId])
}

model Variant {
  id                String    @id @default(cuid())
  name              String
  price             Float
  isActive          Boolean   @default(true)
  productId         String
  printfulVariantId String
  size              String?
  color             String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  product           Product   @relation(fields: [productId], references: [id])
  orderItems        OrderItem[]
  cartItems         CartItem[]

  @@index([productId])
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  name      String?
  password  String
  orders    Order[]
  cart      Cart?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Order {
  id                    String      @id @default(cuid())
  userId                String?
  user                  User?       @relation(fields: [userId], references: [id])
  printfulOrderId       String?     @unique
  stripePaymentIntentId String?
  stripeSessionId       String?     @unique
  status               OrderStatus  @default(pending)
  total                Float
  items                OrderItem[]
  shippingInfo         ShippingInfo?
  notes                String?
  createdAt            DateTime    @default(now())
  updatedAt            DateTime    @updatedAt

  @@index([userId])
}

model OrderItem {
  id              String    @id @default(cuid())
  orderId         String
  order           Order     @relation(fields: [orderId], references: [id])
  variantId       String
  variant         Variant   @relation(fields: [variantId], references: [id])
  quantity        Int
  price           Float
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([orderId])
  @@index([variantId])
}

model ShippingInfo {
  id              String    @id @default(cuid())
  orderId         String    @unique
  order           Order     @relation(fields: [orderId], references: [id])
  name            String
  address1        String
  address2        String?
  city            String
  state           String?
  country         String
  zip             String
  email           String
  phone           String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([orderId])
}

model Cart {
  id        String     @id @default(cuid())
  userId    String?    @unique
  user      User?      @relation(fields: [userId], references: [id])
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        String   @id @default(cuid())
  cartId    String
  cart      Cart     @relation(fields: [cartId], references: [id])
  variantId String
  variant   Variant  @relation(fields: [variantId], references: [id])
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@unique([cartId, variantId])
  @@index([cartId])
  @@index([variantId])
}

enum OrderStatus {
  pending      // Čeká na platbu
  paid         // Zaplaceno, čeká na zpracování
  processing   // Zpracovává se v Printful
  shipped      // Odesláno
  delivered    // Doručeno
  failed       // Platba selhala
  error        // Chyba při zpracování
  cancelled    // Zrušeno
}