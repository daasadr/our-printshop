generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  name      String?
  password  String
  orders    Order[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Product {
  id              String    @id @default(cuid())
  title           String
  description     String
  printfulId      String    @unique
  printfulSync    Boolean   @default(false)
  isActive        Boolean   @default(true)
  variants        Variant[]
  designs         Design[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Variant {
  id              String    @id @default(cuid())
  productId       String
  product         Product   @relation(fields: [productId], references: [id])
  printfulVariantId String  @unique
  name            String
  size            String?
  color           String?
  price           Float
  isActive        Boolean   @default(true)
  orderItems      OrderItem[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Design {
  id              String    @id @default(cuid())
  name            String
  printfulFileId  String
  previewUrl      String
  products        Product[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Order {
  id                String    @id @default(cuid())
  userId            String?
  user              User?     @relation(fields: [userId], references: [id])
  printfulOrderId   String?   @unique
  stripePaymentIntentId String?
  stripeSessionId   String?
  status            OrderStatus @default(pending)
  total             Float
  items             OrderItem[]
  shippingInfo      ShippingInfo?
  notes             String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model OrderItem {
  id              String    @id @default(cuid())
  orderId         String
  order           Order     @relation(fields: [orderId], references: [id])
  variantId       String
  variant         Variant   @relation(fields: [variantId], references: [id])
  quantity        Int
  price           Float
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model ShippingInfo {
  id              String    @id @default(cuid())
  orderId         String    @unique
  order           Order     @relation(fields: [orderId], references: [id])
  name            String
  address1        String
  address2        String?
  city            String
  state           String?
  country         String
  zip             String
  email           String
  phone           String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

enum OrderStatus {
  pending      // Čeká na platbu
  paid         // Zaplaceno, čeká na zpracování
  processing   // Zpracovává se v Printful
  shipped      // Odesláno
  delivered    // Doručeno
  failed       // Platba selhala
  error        // Chyba při zpracování
  cancelled    // Zrušeno
}